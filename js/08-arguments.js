/*
 * Псевдомассив arguments и Array.from и ...
 */


// const fn = function () {
//     console.log(arguments);

//     const newArr = Array.from(arguments);
//     console.log(newArr);
// }

// const fn = function (...args) {
//     console.log(args);
// }

// fn(1, 2, 3);
// fn(1, 2, 3, 4, 5);
// fn(1, 2, 3, 4, 5, 6, 7, 8);


/*
 * Напиши функцию add для сложения произвольного количества аргументов (чисел)
 * - Операция ... (rest)
 */

// 1) Обьявить ф-цую и записать в нее ...
// 2) Написать тотал куда будет все +
// 3) Перебрать массив и += тотал, сделать возврат

// const add = (...arg) => {
    
//     let total = 0;

//     for (const args of arg) {
//         total += args;
//     }

//     return total;
// }



// console.log(add(1, 2, 3));
// console.log(add(1, 2, 4, 5, 6));


/*
 * Напиши функцию filterNumbers(array [, number1, ...]) которая:
 * - первым аргументом принимает массив чисел
 * - после первого аргумента может быть произвольное количество других аргументов которые будут числами.
 * - Функция должна вернуть новый массив, в котором будут только те аргументы, начиная со второго,
 *   для которых есть аналог в оригинальном массиве.
 */

// 1) Создать ф-цию с массивами чисел, в параметрах будет готовый массив
// и ...
// 2) Перебрать оба массива и сровнять на равенство написать условие что если есть
// такое число в массиве то куда то его записать
// 3) Создать то куда надо ето записать массив
// 4) Так же можно сделать через инклюд

const filterNumbers = (array, ...args) => {

    let newArr = [];

    for (let i = 0; i < array.length; i += 1) {
        // console.log(array[i]);

        for (let k = 0; k < args.length; k += 1) {
            // console.log(args[k]);

            if (array[i] === args[k]) {
                newArr.push(args[k]);
            }
        }
    }

    return newArr;
} 



console.log(filterNumbers([1, 2, 3, 4, 5], 10, 15, 2, 3, 8)); // [2, 3]
console.log(filterNumbers([10, 15, 25, 30], 23, 30, 18, 15)); // [30, 15]
console.log(filterNumbers([100, 200, 300, 400, 500], 7, 12, 200, 64)); // [200]